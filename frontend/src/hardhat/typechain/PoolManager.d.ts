/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface PoolManagerInterface extends ethers.utils.Interface {
  functions: {
    "approveToken(address,address,uint256)": FunctionFragment;
    "bindToken(address,address,uint256,uint256)": FunctionFragment;
    "checkToken(address,address)": FunctionFragment;
    "createPool()": FunctionFragment;
    "currentTokens(address)": FunctionFragment;
    "denormalizedWeight(address,address)": FunctionFragment;
    "factory()": FunctionFragment;
    "isPublic(address)": FunctionFragment;
    "normalizedWeight(address,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "rebindToken(address,address,uint256,uint256)": FunctionFragment;
    "setFee(address,uint256)": FunctionFragment;
    "setPublic(address,bool)": FunctionFragment;
    "swapFee(address)": FunctionFragment;
    "tokenBalance(address,address)": FunctionFragment;
    "unbindToken(address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "approveToken",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bindToken",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkToken",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentTokens",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "denormalizedWeight",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(functionFragment: "isPublic", values: [string]): string;
  encodeFunctionData(
    functionFragment: "normalizedWeight",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rebindToken",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPublic",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "swapFee", values: [string]): string;
  encodeFunctionData(
    functionFragment: "tokenBalance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "unbindToken",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "approveToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bindToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "checkToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "denormalizedWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isPublic", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "normalizedWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rebindToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setPublic", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swapFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unbindToken",
    data: BytesLike
  ): Result;

  events: {
    "PoolCreated(address)": EventFragment;
    "TokenApproved(address,address,uint256)": EventFragment;
    "TokenBound(address,address,uint256,uint256)": EventFragment;
    "TokenRebound(address,address,uint256,uint256)": EventFragment;
    "TokenUnbound(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PoolCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenApproved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenBound"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenRebound"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenUnbound"): EventFragment;
}

export class PoolManager extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PoolManagerInterface;

  functions: {
    approveToken(
      _token: string,
      _currentPoolAddress: string,
      _balance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "approveToken(address,address,uint256)"(
      _token: string,
      _currentPoolAddress: string,
      _balance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bindToken(
      _currentPoolAddress: string,
      _token: string,
      _balance: BigNumberish,
      _denorm: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "bindToken(address,address,uint256,uint256)"(
      _currentPoolAddress: string,
      _token: string,
      _balance: BigNumberish,
      _denorm: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    checkToken(
      _currentPoolAddress: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "checkToken(address,address)"(
      _currentPoolAddress: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    createPool(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "createPool()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    currentTokens(
      _currentPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    "currentTokens(address)"(
      _currentPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    denormalizedWeight(
      _currentPoolAddress: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "denormalizedWeight(address,address)"(
      _currentPoolAddress: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    "factory()"(overrides?: CallOverrides): Promise<[string]>;

    isPublic(
      _currentPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isPublic(address)"(
      _currentPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    normalizedWeight(
      _currentPoolAddress: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "normalizedWeight(address,address)"(
      _currentPoolAddress: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    rebindToken(
      _currentPoolAddress: string,
      _token: string,
      _balance: BigNumberish,
      _denorm: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "rebindToken(address,address,uint256,uint256)"(
      _currentPoolAddress: string,
      _token: string,
      _balance: BigNumberish,
      _denorm: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFee(
      _currentPoolAddress: string,
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setFee(address,uint256)"(
      _currentPoolAddress: string,
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPublic(
      _currentPoolAddress: string,
      _public: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setPublic(address,bool)"(
      _currentPoolAddress: string,
      _public: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapFee(
      _currentPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "swapFee(address)"(
      _currentPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenBalance(
      _currentPoolAddress: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "tokenBalance(address,address)"(
      _currentPoolAddress: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    unbindToken(
      _currentPoolAddress: string,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "unbindToken(address,address)"(
      _currentPoolAddress: string,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  approveToken(
    _token: string,
    _currentPoolAddress: string,
    _balance: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "approveToken(address,address,uint256)"(
    _token: string,
    _currentPoolAddress: string,
    _balance: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bindToken(
    _currentPoolAddress: string,
    _token: string,
    _balance: BigNumberish,
    _denorm: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "bindToken(address,address,uint256,uint256)"(
    _currentPoolAddress: string,
    _token: string,
    _balance: BigNumberish,
    _denorm: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  checkToken(
    _currentPoolAddress: string,
    _token: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "checkToken(address,address)"(
    _currentPoolAddress: string,
    _token: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  createPool(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "createPool()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  currentTokens(
    _currentPoolAddress: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "currentTokens(address)"(
    _currentPoolAddress: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  denormalizedWeight(
    _currentPoolAddress: string,
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "denormalizedWeight(address,address)"(
    _currentPoolAddress: string,
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  factory(overrides?: CallOverrides): Promise<string>;

  "factory()"(overrides?: CallOverrides): Promise<string>;

  isPublic(
    _currentPoolAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isPublic(address)"(
    _currentPoolAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  normalizedWeight(
    _currentPoolAddress: string,
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "normalizedWeight(address,address)"(
    _currentPoolAddress: string,
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  rebindToken(
    _currentPoolAddress: string,
    _token: string,
    _balance: BigNumberish,
    _denorm: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "rebindToken(address,address,uint256,uint256)"(
    _currentPoolAddress: string,
    _token: string,
    _balance: BigNumberish,
    _denorm: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFee(
    _currentPoolAddress: string,
    _fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setFee(address,uint256)"(
    _currentPoolAddress: string,
    _fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPublic(
    _currentPoolAddress: string,
    _public: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setPublic(address,bool)"(
    _currentPoolAddress: string,
    _public: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapFee(
    _currentPoolAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "swapFee(address)"(
    _currentPoolAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenBalance(
    _currentPoolAddress: string,
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "tokenBalance(address,address)"(
    _currentPoolAddress: string,
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  unbindToken(
    _currentPoolAddress: string,
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "unbindToken(address,address)"(
    _currentPoolAddress: string,
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    approveToken(
      _token: string,
      _currentPoolAddress: string,
      _balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "approveToken(address,address,uint256)"(
      _token: string,
      _currentPoolAddress: string,
      _balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    bindToken(
      _currentPoolAddress: string,
      _token: string,
      _balance: BigNumberish,
      _denorm: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "bindToken(address,address,uint256,uint256)"(
      _currentPoolAddress: string,
      _token: string,
      _balance: BigNumberish,
      _denorm: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    checkToken(
      _currentPoolAddress: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "checkToken(address,address)"(
      _currentPoolAddress: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    createPool(overrides?: CallOverrides): Promise<string>;

    "createPool()"(overrides?: CallOverrides): Promise<string>;

    currentTokens(
      _currentPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "currentTokens(address)"(
      _currentPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    denormalizedWeight(
      _currentPoolAddress: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "denormalizedWeight(address,address)"(
      _currentPoolAddress: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<string>;

    "factory()"(overrides?: CallOverrides): Promise<string>;

    isPublic(
      _currentPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isPublic(address)"(
      _currentPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    normalizedWeight(
      _currentPoolAddress: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "normalizedWeight(address,address)"(
      _currentPoolAddress: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    rebindToken(
      _currentPoolAddress: string,
      _token: string,
      _balance: BigNumberish,
      _denorm: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "rebindToken(address,address,uint256,uint256)"(
      _currentPoolAddress: string,
      _token: string,
      _balance: BigNumberish,
      _denorm: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFee(
      _currentPoolAddress: string,
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setFee(address,uint256)"(
      _currentPoolAddress: string,
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPublic(
      _currentPoolAddress: string,
      _public: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPublic(address,bool)"(
      _currentPoolAddress: string,
      _public: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    swapFee(
      _currentPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "swapFee(address)"(
      _currentPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenBalance(
      _currentPoolAddress: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenBalance(address,address)"(
      _currentPoolAddress: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unbindToken(
      _currentPoolAddress: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "unbindToken(address,address)"(
      _currentPoolAddress: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    PoolCreated(
      bpoolAddress: null
    ): TypedEventFilter<[string], { bpoolAddress: string }>;

    TokenApproved(
      token: null,
      currentPoolAddress: null,
      balance: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { token: string; currentPoolAddress: string; balance: BigNumber }
    >;

    TokenBound(
      currentPool: null,
      token: null,
      balance: null,
      denorm: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        currentPool: string;
        token: string;
        balance: BigNumber;
        denorm: BigNumber;
      }
    >;

    TokenRebound(
      currentPool: null,
      token: null,
      balance: null,
      denorm: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        currentPool: string;
        token: string;
        balance: BigNumber;
        denorm: BigNumber;
      }
    >;

    TokenUnbound(
      currentPool: null,
      token: null
    ): TypedEventFilter<
      [string, string],
      { currentPool: string; token: string }
    >;
  };

  estimateGas: {
    approveToken(
      _token: string,
      _currentPoolAddress: string,
      _balance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "approveToken(address,address,uint256)"(
      _token: string,
      _currentPoolAddress: string,
      _balance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bindToken(
      _currentPoolAddress: string,
      _token: string,
      _balance: BigNumberish,
      _denorm: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "bindToken(address,address,uint256,uint256)"(
      _currentPoolAddress: string,
      _token: string,
      _balance: BigNumberish,
      _denorm: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    checkToken(
      _currentPoolAddress: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "checkToken(address,address)"(
      _currentPoolAddress: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createPool(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "createPool()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    currentTokens(
      _currentPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "currentTokens(address)"(
      _currentPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    denormalizedWeight(
      _currentPoolAddress: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "denormalizedWeight(address,address)"(
      _currentPoolAddress: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    "factory()"(overrides?: CallOverrides): Promise<BigNumber>;

    isPublic(
      _currentPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isPublic(address)"(
      _currentPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    normalizedWeight(
      _currentPoolAddress: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "normalizedWeight(address,address)"(
      _currentPoolAddress: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    rebindToken(
      _currentPoolAddress: string,
      _token: string,
      _balance: BigNumberish,
      _denorm: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "rebindToken(address,address,uint256,uint256)"(
      _currentPoolAddress: string,
      _token: string,
      _balance: BigNumberish,
      _denorm: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFee(
      _currentPoolAddress: string,
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setFee(address,uint256)"(
      _currentPoolAddress: string,
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPublic(
      _currentPoolAddress: string,
      _public: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setPublic(address,bool)"(
      _currentPoolAddress: string,
      _public: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapFee(
      _currentPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "swapFee(address)"(
      _currentPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenBalance(
      _currentPoolAddress: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenBalance(address,address)"(
      _currentPoolAddress: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unbindToken(
      _currentPoolAddress: string,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "unbindToken(address,address)"(
      _currentPoolAddress: string,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approveToken(
      _token: string,
      _currentPoolAddress: string,
      _balance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "approveToken(address,address,uint256)"(
      _token: string,
      _currentPoolAddress: string,
      _balance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bindToken(
      _currentPoolAddress: string,
      _token: string,
      _balance: BigNumberish,
      _denorm: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "bindToken(address,address,uint256,uint256)"(
      _currentPoolAddress: string,
      _token: string,
      _balance: BigNumberish,
      _denorm: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    checkToken(
      _currentPoolAddress: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "checkToken(address,address)"(
      _currentPoolAddress: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createPool(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "createPool()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    currentTokens(
      _currentPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "currentTokens(address)"(
      _currentPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    denormalizedWeight(
      _currentPoolAddress: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "denormalizedWeight(address,address)"(
      _currentPoolAddress: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "factory()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isPublic(
      _currentPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isPublic(address)"(
      _currentPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    normalizedWeight(
      _currentPoolAddress: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "normalizedWeight(address,address)"(
      _currentPoolAddress: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rebindToken(
      _currentPoolAddress: string,
      _token: string,
      _balance: BigNumberish,
      _denorm: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "rebindToken(address,address,uint256,uint256)"(
      _currentPoolAddress: string,
      _token: string,
      _balance: BigNumberish,
      _denorm: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFee(
      _currentPoolAddress: string,
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setFee(address,uint256)"(
      _currentPoolAddress: string,
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPublic(
      _currentPoolAddress: string,
      _public: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setPublic(address,bool)"(
      _currentPoolAddress: string,
      _public: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapFee(
      _currentPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "swapFee(address)"(
      _currentPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenBalance(
      _currentPoolAddress: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenBalance(address,address)"(
      _currentPoolAddress: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unbindToken(
      _currentPoolAddress: string,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "unbindToken(address,address)"(
      _currentPoolAddress: string,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
