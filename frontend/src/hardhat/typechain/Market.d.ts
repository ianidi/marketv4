/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface MarketInterface extends ethers.utils.Interface {
  functions: {
    "COLLATERAL_TOKEN_WEIGHT()": FunctionFragment;
    "CONDITIONAL_TOKEN_WEIGHT()": FunctionFragment;
    "baseCurrencyList(uint256)": FunctionFragment;
    "buy(uint256,uint256)": FunctionFragment;
    "calcSwapFee(uint8)": FunctionFragment;
    "close(uint256)": FunctionFragment;
    "collateralDecimalsList(address)": FunctionFragment;
    "collateralList(address)": FunctionFragment;
    "create(uint256,uint256,address,uint256)": FunctionFragment;
    "currentMarketID()": FunctionFragment;
    "fulfillFinalPrice(bytes32,uint256)": FunctionFragment;
    "fulfillInitialPrice(bytes32,uint256)": FunctionFragment;
    "isOwner()": FunctionFragment;
    "markets(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause(uint256)": FunctionFragment;
    "poolManager()": FunctionFragment;
    "redeem(uint256,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "requestToMarketID(bytes32)": FunctionFragment;
    "resume(uint256)": FunctionFragment;
    "setBaseCurrencyList(uint256,string)": FunctionFragment;
    "setChainlink(address,bytes32,uint256)": FunctionFragment;
    "setCollateral(address,bool,uint8)": FunctionFragment;
    "setLinkToken(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "viewMarketExist(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "COLLATERAL_TOKEN_WEIGHT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CONDITIONAL_TOKEN_WEIGHT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "baseCurrencyList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buy",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcSwapFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "close", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "collateralDecimalsList",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralList",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "create",
    values: [BigNumberish, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentMarketID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillFinalPrice",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillInitialPrice",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "isOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "markets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "poolManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestToMarketID",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "resume",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBaseCurrencyList",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setChainlink",
    values: [string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCollateral",
    values: [string, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLinkToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "viewMarketExist",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "COLLATERAL_TOKEN_WEIGHT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CONDITIONAL_TOKEN_WEIGHT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseCurrencyList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calcSwapFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "close", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collateralDecimalsList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "create", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentMarketID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fulfillFinalPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fulfillInitialPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "markets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestToMarketID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resume", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBaseCurrencyList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setChainlink",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLinkToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewMarketExist",
    data: BytesLike
  ): Result;

  events: {
    "Buy(uint256,uint256)": EventFragment;
    "ChainlinkCancelled(bytes32)": EventFragment;
    "ChainlinkFulfilled(bytes32)": EventFragment;
    "ChainlinkRequested(bytes32)": EventFragment;
    "Closed(uint256,uint256)": EventFragment;
    "Created(uint256,uint256)": EventFragment;
    "NewToken(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(uint256,uint256)": EventFragment;
    "Redeem(uint256,uint256)": EventFragment;
    "Resumed(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Buy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChainlinkCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChainlinkFulfilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChainlinkRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Closed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Created"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Redeem"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Resumed"): EventFragment;
}

export class Market extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MarketInterface;

  functions: {
    COLLATERAL_TOKEN_WEIGHT(overrides?: CallOverrides): Promise<[BigNumber]>;

    "COLLATERAL_TOKEN_WEIGHT()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    CONDITIONAL_TOKEN_WEIGHT(overrides?: CallOverrides): Promise<[BigNumber]>;

    "CONDITIONAL_TOKEN_WEIGHT()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    baseCurrencyList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "baseCurrencyList(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    buy(
      _marketID: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "buy(uint256,uint256)"(
      _marketID: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calcSwapFee(
      _decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calcSwapFee(uint8)"(
      _decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    close(
      _marketID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "close(uint256)"(
      _marketID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collateralDecimalsList(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    "collateralDecimalsList(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    collateralList(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    "collateralList(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    create(
      _baseCurrencyID: BigNumberish,
      _duration: BigNumberish,
      _collateralToken: string,
      _collateralAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "create(uint256,uint256,address,uint256)"(
      _baseCurrencyID: BigNumberish,
      _duration: BigNumberish,
      _collateralToken: string,
      _collateralAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    currentMarketID(overrides?: CallOverrides): Promise<[BigNumber]>;

    "currentMarketID()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    fulfillFinalPrice(
      _requestId: BytesLike,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "fulfillFinalPrice(bytes32,uint256)"(
      _requestId: BytesLike,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fulfillInitialPrice(
      _requestId: BytesLike,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "fulfillInitialPrice(bytes32,uint256)"(
      _requestId: BytesLike,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isOwner(overrides?: CallOverrides): Promise<[boolean]>;

    "isOwner()"(overrides?: CallOverrides): Promise<[boolean]>;

    markets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        string,
        string,
        string,
        string
      ] & {
        exist: boolean;
        marketID: BigNumber;
        baseCurrencyID: BigNumber;
        initialPrice: BigNumber;
        finalPrice: BigNumber;
        created: BigNumber;
        duration: BigNumber;
        totalDeposit: BigNumber;
        totalRedemption: BigNumber;
        status: number;
        collateralToken: string;
        bearToken: string;
        bullToken: string;
        pool: string;
      }
    >;

    "markets(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        string,
        string,
        string,
        string
      ] & {
        exist: boolean;
        marketID: BigNumber;
        baseCurrencyID: BigNumber;
        initialPrice: BigNumber;
        finalPrice: BigNumber;
        created: BigNumber;
        duration: BigNumber;
        totalDeposit: BigNumber;
        totalRedemption: BigNumber;
        status: number;
        collateralToken: string;
        bearToken: string;
        bullToken: string;
        pool: string;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    pause(
      _marketID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "pause(uint256)"(
      _marketID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    poolManager(overrides?: CallOverrides): Promise<[string]>;

    "poolManager()"(overrides?: CallOverrides): Promise<[string]>;

    redeem(
      _marketID: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "redeem(uint256,uint256)"(
      _marketID: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestToMarketID(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "requestToMarketID(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    resume(
      _marketID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "resume(uint256)"(
      _marketID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBaseCurrencyList(
      _baseCurrencyID: BigNumberish,
      _title: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setBaseCurrencyList(uint256,string)"(
      _baseCurrencyID: BigNumberish,
      _title: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setChainlink(
      _chainlinkOracle: string,
      _chainlinkJobID: BytesLike,
      _chainlinkFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setChainlink(address,bytes32,uint256)"(
      _chainlinkOracle: string,
      _chainlinkJobID: BytesLike,
      _chainlinkFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCollateral(
      _collateral: string,
      _value: boolean,
      _decimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setCollateral(address,bool,uint8)"(
      _collateral: string,
      _value: boolean,
      _decimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLinkToken(
      _link: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setLinkToken(address)"(
      _link: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    viewMarketExist(
      _marketID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "viewMarketExist(uint256)"(
      _marketID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  COLLATERAL_TOKEN_WEIGHT(overrides?: CallOverrides): Promise<BigNumber>;

  "COLLATERAL_TOKEN_WEIGHT()"(overrides?: CallOverrides): Promise<BigNumber>;

  CONDITIONAL_TOKEN_WEIGHT(overrides?: CallOverrides): Promise<BigNumber>;

  "CONDITIONAL_TOKEN_WEIGHT()"(overrides?: CallOverrides): Promise<BigNumber>;

  baseCurrencyList(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "baseCurrencyList(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  buy(
    _marketID: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "buy(uint256,uint256)"(
    _marketID: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calcSwapFee(
    _decimals: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calcSwapFee(uint8)"(
    _decimals: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  close(
    _marketID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "close(uint256)"(
    _marketID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collateralDecimalsList(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<number>;

  "collateralDecimalsList(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<number>;

  collateralList(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "collateralList(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  create(
    _baseCurrencyID: BigNumberish,
    _duration: BigNumberish,
    _collateralToken: string,
    _collateralAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "create(uint256,uint256,address,uint256)"(
    _baseCurrencyID: BigNumberish,
    _duration: BigNumberish,
    _collateralToken: string,
    _collateralAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  currentMarketID(overrides?: CallOverrides): Promise<BigNumber>;

  "currentMarketID()"(overrides?: CallOverrides): Promise<BigNumber>;

  fulfillFinalPrice(
    _requestId: BytesLike,
    _price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "fulfillFinalPrice(bytes32,uint256)"(
    _requestId: BytesLike,
    _price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fulfillInitialPrice(
    _requestId: BytesLike,
    _price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "fulfillInitialPrice(bytes32,uint256)"(
    _requestId: BytesLike,
    _price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isOwner(overrides?: CallOverrides): Promise<boolean>;

  "isOwner()"(overrides?: CallOverrides): Promise<boolean>;

  markets(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      string,
      string,
      string,
      string
    ] & {
      exist: boolean;
      marketID: BigNumber;
      baseCurrencyID: BigNumber;
      initialPrice: BigNumber;
      finalPrice: BigNumber;
      created: BigNumber;
      duration: BigNumber;
      totalDeposit: BigNumber;
      totalRedemption: BigNumber;
      status: number;
      collateralToken: string;
      bearToken: string;
      bullToken: string;
      pool: string;
    }
  >;

  "markets(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      string,
      string,
      string,
      string
    ] & {
      exist: boolean;
      marketID: BigNumber;
      baseCurrencyID: BigNumber;
      initialPrice: BigNumber;
      finalPrice: BigNumber;
      created: BigNumber;
      duration: BigNumber;
      totalDeposit: BigNumber;
      totalRedemption: BigNumber;
      status: number;
      collateralToken: string;
      bearToken: string;
      bullToken: string;
      pool: string;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  pause(
    _marketID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "pause(uint256)"(
    _marketID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  poolManager(overrides?: CallOverrides): Promise<string>;

  "poolManager()"(overrides?: CallOverrides): Promise<string>;

  redeem(
    _marketID: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "redeem(uint256,uint256)"(
    _marketID: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestToMarketID(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "requestToMarketID(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  resume(
    _marketID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "resume(uint256)"(
    _marketID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBaseCurrencyList(
    _baseCurrencyID: BigNumberish,
    _title: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setBaseCurrencyList(uint256,string)"(
    _baseCurrencyID: BigNumberish,
    _title: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setChainlink(
    _chainlinkOracle: string,
    _chainlinkJobID: BytesLike,
    _chainlinkFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setChainlink(address,bytes32,uint256)"(
    _chainlinkOracle: string,
    _chainlinkJobID: BytesLike,
    _chainlinkFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCollateral(
    _collateral: string,
    _value: boolean,
    _decimals: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setCollateral(address,bool,uint8)"(
    _collateral: string,
    _value: boolean,
    _decimals: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLinkToken(
    _link: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setLinkToken(address)"(
    _link: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  viewMarketExist(
    _marketID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "viewMarketExist(uint256)"(
    _marketID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    COLLATERAL_TOKEN_WEIGHT(overrides?: CallOverrides): Promise<BigNumber>;

    "COLLATERAL_TOKEN_WEIGHT()"(overrides?: CallOverrides): Promise<BigNumber>;

    CONDITIONAL_TOKEN_WEIGHT(overrides?: CallOverrides): Promise<BigNumber>;

    "CONDITIONAL_TOKEN_WEIGHT()"(overrides?: CallOverrides): Promise<BigNumber>;

    baseCurrencyList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "baseCurrencyList(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    buy(
      _marketID: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "buy(uint256,uint256)"(
      _marketID: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    calcSwapFee(
      _decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcSwapFee(uint8)"(
      _decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    close(_marketID: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "close(uint256)"(
      _marketID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    collateralDecimalsList(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<number>;

    "collateralDecimalsList(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<number>;

    collateralList(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "collateralList(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    create(
      _baseCurrencyID: BigNumberish,
      _duration: BigNumberish,
      _collateralToken: string,
      _collateralAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "create(uint256,uint256,address,uint256)"(
      _baseCurrencyID: BigNumberish,
      _duration: BigNumberish,
      _collateralToken: string,
      _collateralAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    currentMarketID(overrides?: CallOverrides): Promise<BigNumber>;

    "currentMarketID()"(overrides?: CallOverrides): Promise<BigNumber>;

    fulfillFinalPrice(
      _requestId: BytesLike,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "fulfillFinalPrice(bytes32,uint256)"(
      _requestId: BytesLike,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    fulfillInitialPrice(
      _requestId: BytesLike,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "fulfillInitialPrice(bytes32,uint256)"(
      _requestId: BytesLike,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isOwner(overrides?: CallOverrides): Promise<boolean>;

    "isOwner()"(overrides?: CallOverrides): Promise<boolean>;

    markets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        string,
        string,
        string,
        string
      ] & {
        exist: boolean;
        marketID: BigNumber;
        baseCurrencyID: BigNumber;
        initialPrice: BigNumber;
        finalPrice: BigNumber;
        created: BigNumber;
        duration: BigNumber;
        totalDeposit: BigNumber;
        totalRedemption: BigNumber;
        status: number;
        collateralToken: string;
        bearToken: string;
        bullToken: string;
        pool: string;
      }
    >;

    "markets(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        string,
        string,
        string,
        string
      ] & {
        exist: boolean;
        marketID: BigNumber;
        baseCurrencyID: BigNumber;
        initialPrice: BigNumber;
        finalPrice: BigNumber;
        created: BigNumber;
        duration: BigNumber;
        totalDeposit: BigNumber;
        totalRedemption: BigNumber;
        status: number;
        collateralToken: string;
        bearToken: string;
        bullToken: string;
        pool: string;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    pause(_marketID: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "pause(uint256)"(
      _marketID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    poolManager(overrides?: CallOverrides): Promise<string>;

    "poolManager()"(overrides?: CallOverrides): Promise<string>;

    redeem(
      _marketID: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "redeem(uint256,uint256)"(
      _marketID: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    requestToMarketID(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "requestToMarketID(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    resume(_marketID: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "resume(uint256)"(
      _marketID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setBaseCurrencyList(
      _baseCurrencyID: BigNumberish,
      _title: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setBaseCurrencyList(uint256,string)"(
      _baseCurrencyID: BigNumberish,
      _title: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setChainlink(
      _chainlinkOracle: string,
      _chainlinkJobID: BytesLike,
      _chainlinkFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setChainlink(address,bytes32,uint256)"(
      _chainlinkOracle: string,
      _chainlinkJobID: BytesLike,
      _chainlinkFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCollateral(
      _collateral: string,
      _value: boolean,
      _decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setCollateral(address,bool,uint8)"(
      _collateral: string,
      _value: boolean,
      _decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLinkToken(_link: string, overrides?: CallOverrides): Promise<void>;

    "setLinkToken(address)"(
      _link: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    viewMarketExist(
      _marketID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "viewMarketExist(uint256)"(
      _marketID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    Buy(
      marketID: BigNumberish | null,
      _time: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { marketID: BigNumber; _time: BigNumber }
    >;

    ChainlinkCancelled(
      id: BytesLike | null
    ): TypedEventFilter<[string], { id: string }>;

    ChainlinkFulfilled(
      id: BytesLike | null
    ): TypedEventFilter<[string], { id: string }>;

    ChainlinkRequested(
      id: BytesLike | null
    ): TypedEventFilter<[string], { id: string }>;

    Closed(
      marketID: BigNumberish | null,
      _time: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { marketID: BigNumber; _time: BigNumber }
    >;

    Created(
      marketID: BigNumberish | null,
      _time: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { marketID: BigNumber; _time: BigNumber }
    >;

    NewToken(
      contractAddress: string | null,
      _time: null
    ): TypedEventFilter<
      [string, BigNumber],
      { contractAddress: string; _time: BigNumber }
    >;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    Paused(
      marketID: BigNumberish | null,
      _time: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { marketID: BigNumber; _time: BigNumber }
    >;

    Redeem(
      marketID: BigNumberish | null,
      _time: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { marketID: BigNumber; _time: BigNumber }
    >;

    Resumed(
      marketID: BigNumberish | null,
      _time: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { marketID: BigNumber; _time: BigNumber }
    >;
  };

  estimateGas: {
    COLLATERAL_TOKEN_WEIGHT(overrides?: CallOverrides): Promise<BigNumber>;

    "COLLATERAL_TOKEN_WEIGHT()"(overrides?: CallOverrides): Promise<BigNumber>;

    CONDITIONAL_TOKEN_WEIGHT(overrides?: CallOverrides): Promise<BigNumber>;

    "CONDITIONAL_TOKEN_WEIGHT()"(overrides?: CallOverrides): Promise<BigNumber>;

    baseCurrencyList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "baseCurrencyList(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buy(
      _marketID: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "buy(uint256,uint256)"(
      _marketID: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calcSwapFee(
      _decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcSwapFee(uint8)"(
      _decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    close(
      _marketID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "close(uint256)"(
      _marketID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collateralDecimalsList(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "collateralDecimalsList(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralList(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "collateralList(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    create(
      _baseCurrencyID: BigNumberish,
      _duration: BigNumberish,
      _collateralToken: string,
      _collateralAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "create(uint256,uint256,address,uint256)"(
      _baseCurrencyID: BigNumberish,
      _duration: BigNumberish,
      _collateralToken: string,
      _collateralAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    currentMarketID(overrides?: CallOverrides): Promise<BigNumber>;

    "currentMarketID()"(overrides?: CallOverrides): Promise<BigNumber>;

    fulfillFinalPrice(
      _requestId: BytesLike,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "fulfillFinalPrice(bytes32,uint256)"(
      _requestId: BytesLike,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fulfillInitialPrice(
      _requestId: BytesLike,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "fulfillInitialPrice(bytes32,uint256)"(
      _requestId: BytesLike,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "isOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    markets(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "markets(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      _marketID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "pause(uint256)"(
      _marketID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    poolManager(overrides?: CallOverrides): Promise<BigNumber>;

    "poolManager()"(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(
      _marketID: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "redeem(uint256,uint256)"(
      _marketID: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestToMarketID(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "requestToMarketID(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    resume(
      _marketID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "resume(uint256)"(
      _marketID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBaseCurrencyList(
      _baseCurrencyID: BigNumberish,
      _title: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setBaseCurrencyList(uint256,string)"(
      _baseCurrencyID: BigNumberish,
      _title: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setChainlink(
      _chainlinkOracle: string,
      _chainlinkJobID: BytesLike,
      _chainlinkFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setChainlink(address,bytes32,uint256)"(
      _chainlinkOracle: string,
      _chainlinkJobID: BytesLike,
      _chainlinkFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCollateral(
      _collateral: string,
      _value: boolean,
      _decimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setCollateral(address,bool,uint8)"(
      _collateral: string,
      _value: boolean,
      _decimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLinkToken(
      _link: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setLinkToken(address)"(
      _link: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    viewMarketExist(
      _marketID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "viewMarketExist(uint256)"(
      _marketID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    COLLATERAL_TOKEN_WEIGHT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "COLLATERAL_TOKEN_WEIGHT()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CONDITIONAL_TOKEN_WEIGHT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "CONDITIONAL_TOKEN_WEIGHT()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseCurrencyList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "baseCurrencyList(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buy(
      _marketID: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "buy(uint256,uint256)"(
      _marketID: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calcSwapFee(
      _decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calcSwapFee(uint8)"(
      _decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    close(
      _marketID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "close(uint256)"(
      _marketID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collateralDecimalsList(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "collateralDecimalsList(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralList(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "collateralList(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    create(
      _baseCurrencyID: BigNumberish,
      _duration: BigNumberish,
      _collateralToken: string,
      _collateralAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "create(uint256,uint256,address,uint256)"(
      _baseCurrencyID: BigNumberish,
      _duration: BigNumberish,
      _collateralToken: string,
      _collateralAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    currentMarketID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "currentMarketID()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fulfillFinalPrice(
      _requestId: BytesLike,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "fulfillFinalPrice(bytes32,uint256)"(
      _requestId: BytesLike,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fulfillInitialPrice(
      _requestId: BytesLike,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "fulfillInitialPrice(bytes32,uint256)"(
      _requestId: BytesLike,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    markets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "markets(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      _marketID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "pause(uint256)"(
      _marketID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    poolManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "poolManager()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeem(
      _marketID: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "redeem(uint256,uint256)"(
      _marketID: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestToMarketID(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "requestToMarketID(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    resume(
      _marketID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "resume(uint256)"(
      _marketID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBaseCurrencyList(
      _baseCurrencyID: BigNumberish,
      _title: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setBaseCurrencyList(uint256,string)"(
      _baseCurrencyID: BigNumberish,
      _title: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setChainlink(
      _chainlinkOracle: string,
      _chainlinkJobID: BytesLike,
      _chainlinkFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setChainlink(address,bytes32,uint256)"(
      _chainlinkOracle: string,
      _chainlinkJobID: BytesLike,
      _chainlinkFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCollateral(
      _collateral: string,
      _value: boolean,
      _decimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setCollateral(address,bool,uint8)"(
      _collateral: string,
      _value: boolean,
      _decimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLinkToken(
      _link: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setLinkToken(address)"(
      _link: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    viewMarketExist(
      _marketID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "viewMarketExist(uint256)"(
      _marketID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
